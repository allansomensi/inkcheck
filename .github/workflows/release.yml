name: Release Binaries

on:
  release:
    types: [created]

jobs:
  build-and-upload:
    name: Build and Upload

    permissions:
      contents: write

    strategy:
      matrix:
        include:
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            asset_name_suffix: x86_64-windows.zip
            binary_name: inkcheck.exe

          - target: x86_64-apple-darwin
            os: macos-latest
            asset_name_suffix: x86_64-apple-darwin.tar.gz
            binary_name: inkcheck

          - target: aarch64-apple-darwin
            os: macos-latest
            asset_name_suffix: aarch64-apple-darwin.tar.gz
            binary_name: inkcheck

          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            asset_name_suffix: x86_64-linux-gnu.tar.gz
            binary_name: inkcheck

          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            asset_name_suffix: x86_64-linux-musl.tar.gz
            binary_name: inkcheck

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl-tools for static linking
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package release assets
        shell: bash
        run: |
          SOURCE_DIR="target/${{ matrix.target }}/release"

          mkdir -p release

          ASSET_NAME="inkcheck-${{ github.ref_name }}-${{ matrix.asset_name_suffix }}"
          ASSET_PATH="release/${ASSET_NAME}"

          if [ "${{ runner.os }}" == "Windows" ]; then
            (cd "${SOURCE_DIR}" && 7z a "../../../${ASSET_PATH}" "${{ matrix.binary_name }}")
          else
            tar -czf "${ASSET_PATH}" -C "${SOURCE_DIR}" "${{ matrix.binary_name }}"
          fi

          echo "ASSET_PATH=${ASSET_PATH}" >> $GITHUB_ENV
          echo "ASSET_NAME=${ASSET_NAME}" >> $GITHUB_ENV

      - name: Upload release asset
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        shell: bash
        run: gh release upload "${{ github.ref_name }}" "${{ env.ASSET_PATH }}"
