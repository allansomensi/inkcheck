name: Release Binaries

on:
  release:
    types: [created]

jobs:
  build-and-upload:
    name: Build and Upload

    strategy:
      matrix:
        include:
          # --- Windows ---
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            asset_name_suffix: x86_64-windows.zip
            binary_name: inkcheck.exe

          # --- macOS ---
          - target: x86_64-apple-darwin
            os: macos-latest
            asset_name_suffix: x86_64-apple-darwin.tar.gz
            binary_name: inkcheck

          - target: aarch64-apple-darwin
            os: macos-latest
            asset_name_suffix: aarch64-apple-darwin.tar.gz
            binary_name: inkcheck

          # --- Linux ---
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            asset_name_suffix: x86_64-linux-gnu.tar.gz
            binary_name: inkcheck

          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            asset_name_suffix: x86_64-linux-musl.tar.gz
            binary_name: inkcheck

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl-tools for static linking
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: sudo apt-get update && sudo apt-get install -y musl-tools

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package release assets
        shell: bash
        run: |
          BINARY_PATH="target/${{ matrix.target }}/release/${{ matrix.binary_name }}"

          mkdir -p release

          ASSET_NAME="inkcheck-${{ github.ref_name }}-${{ matrix.asset_name_suffix }}"

          if [ "${{ runner.os }}" == "Windows" ]; then
            7z a "release/${ASSET_NAME}" "${BINARY_PATH}"
          else
            tar -czf "release/${ASSET_NAME}" -C "target/${{ matrix.target }}/release" "${{ matrix.binary_name }}"
          fi

          echo "ASSET_PATH=release/${ASSET_NAME}" >> $GITHUB_ENV

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/octet-stream
